// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	propertyImage "api-airbnb-alta/features/propertyImage"

	mock "github.com/stretchr/testify/mock"
)

// PropertyImageRepo is an autogenerated mock type for the RepositoryInterface type
type PropertyImageRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: input
func (_m *PropertyImageRepo) Create(input propertyImage.Core) error {
	ret := _m.Called(input)

	var r0 error
	if rf, ok := ret.Get(0).(func(propertyImage.Core) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *PropertyImageRepo) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *PropertyImageRepo) GetAll() ([]propertyImage.Core, error) {
	ret := _m.Called()

	var r0 []propertyImage.Core
	if rf, ok := ret.Get(0).(func() []propertyImage.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]propertyImage.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *PropertyImageRepo) GetById(id int) (propertyImage.Core, error) {
	ret := _m.Called(id)

	var r0 propertyImage.Core
	if rf, ok := ret.Get(0).(func(int) propertyImage.Core); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(propertyImage.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPropertyById provides a mock function with given fields: id
func (_m *PropertyImageRepo) GetPropertyById(id int) (propertyImage.Property, error) {
	ret := _m.Called(id)

	var r0 propertyImage.Property
	if rf, ok := ret.Get(0).(func(int) propertyImage.Property); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(propertyImage.Property)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: input, id
func (_m *PropertyImageRepo) Update(input propertyImage.Core, id int) error {
	ret := _m.Called(input, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(propertyImage.Core, int) error); ok {
		r0 = rf(input, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPropertyImageRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewPropertyImageRepo creates a new instance of PropertyImageRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPropertyImageRepo(t mockConstructorTestingTNewPropertyImageRepo) *PropertyImageRepo {
	mock := &PropertyImageRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
